<snippet>
  <content><![CDATA[
/*
 * 'Highly configurable' mutable plugin boilerplate
 * Author: @markdalgleish
 * Further changes, comments: @addyosmani
 * Licensed under the MIT license
 */

// Note that with this pattern, as per Alex Sexton's, the plugin logic
// hasn't been nested in a jQuery plugin. Instead, we just use
// jQuery for its instantiation.

;(function(\$, window, document, undefined) {
  // our plugin constructor
  var ${1: Plugin} = function(elem, options) {
    this.elem = elem;
    this.\$elem = \$(elem);
    this.options = options;
    // This next line takes advantage of HTML5 data attributes
    // to support customization of the plugin on a per-element
    // basis. For example,
    // <div class=item' data-plugin-options='{"message":"Goodbye World!"}'></div>
    this.metadata = this.\$elem.data('plugin-options');
  };
  // the plugin prototype
  ${1: Plugin}.prototype = {
    defaults: {
      message: 'Hello world!'
    },
    init: function() {
      // Introduce defaults that can be extended either
      // globally or using an object literal.
      this.config = \$.extend({}, this.defaults, this.options,
        this.metadata);
      // Sample usage:
      // Set the message per instance:
      // \$('#elem').plugin({ message: 'Goodbye World!'});
      // or
      // var p = new ${1:Plugin}(document.getElementById('elem'),
      // { message: 'Goodbye World!'}).init()
      // or, set the global default message:
      // ${1:Plugin}.defaults.message = 'Goodbye World!'
      this.sampleMethod();
      return this;
    },
    sampleMethod: function() {
      // eg. show the currently configured message
      // console.log(this.config.message);
    }
  }
  ${1: Plugin}.defaults = ${1: Plugin}.prototype.defaults;

  \$.fn.${2: plugin} = function(options) {
    return this.each(function() {
      new ${1: Plugin}(this, options).init();
    });
  };
  //optional: window.${1:Plugin} = ${1:Plugin};
})(jQuery, window, document);

// References
/*
Creating Highly Configurable jQuery Plugins (by Mark Dalgleish) - http://goo.gl/1VwfP http://goo.gl/bg63
Essential jQuery Plugin Patterns (by Addy Osmani) - http://goo.gl/oE0ge
*/
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <!-- <tabTrigger>hello</tabTrigger> -->
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.js</scope>
  <description>$.fn.plugin = new Plugin - Highly configurable mutable plugin boilerplate for jQuery</description>
</snippet>
